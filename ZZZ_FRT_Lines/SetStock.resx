<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="openFileDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        A///4Af//+AH///wD///+A////gf///8P////D////5////+f/8=
</value>
  </data>
</root>